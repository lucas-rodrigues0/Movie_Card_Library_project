{"version":3,"sources":["components/MovieCard.js","services/movieData.js","services/movieAPI.js","components/Loading.js","pages/MovieList.js","components/MovieForm.js","pages/MovieDetailsInfo.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["MovieCard","movie","this","props","imagePath","title","storyline","id","data-testid","className","src","alt","to","React","Component","movies","subtitle","rating","bookmarked","genre","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","simulateRequest","response","callback","setTimeout","getMovies","Promise","resolve","getMovie","movieId","find","mov","parseInt","updateMovie","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","Loading","MovieList","state","isLoaded","fetchMovies","bind","movieAPI","moviesRecieved","setState","key","MovieForm","handleSubmit","onSubmit","field","newValue","htmlFor","placeholder","type","value","onChange","event","target","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","defaultProps","MovieDetailsInfo","verifyImagePath","path","MovieDetails","fetchMovie","deleteLink","match","params","movieRecieved","includes","NewMovie","shouldRedirect","EditMovie","NotFound","App","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5e0a18ad.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './MovieCard.css';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { imagePath, title, storyline, id } = movie;\n    return (\n      <div data-testid=\"movie-card\" className=\"movie-card-container\">\n        <div className=\"movie-info-container\">\n          <h4>{ title }</h4>\n          <img src={ imagePath } alt=\"Movie Cover\" />\n          <p>{ storyline }</p>\n        </div>\n        <div className=\"link-details-container\">\n          <Link to={ `/Movie_Card_Library_project/movies/${id}` }>VER DETALHES</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    imagePath: PropTypes.string,\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport './Loading.css';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport MovieCard from '../components/MovieCard';\nimport './MovieList.css';\n\nimport * as movieAPI from '../services/movieAPI';\nimport Loading from '../components/Loading';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      isLoaded: false,\n    };\n\n    this.fetchMovies = this.fetchMovies.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  async fetchMovies() {\n    const { getMovies } = movieAPI;\n    const moviesRecieved = await getMovies();\n    this.setState({\n      movies: moviesRecieved,\n      isLoaded: true,\n    });\n  }\n\n  render() {\n    const { movies, isLoaded } = this.state;\n\n    if (!isLoaded) {\n      return <Loading />;\n    }\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list-container\">\n        {movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />)}\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div className=\"form-input\">\n        <label htmlFor=\"movie_title\">\n          Título\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div className=\"form-input\">\n        <label htmlFor=\"movie_subtitle\">\n          Subtítulo\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row form-input\">\n        <label htmlFor=\"movie_image\">\n          Imagem\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div className=\"form-input\">\n        <label htmlFor=\"movie_storyline\">\n          Sinopse\n          <textarea\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div className=\"form-input\">\n        <label htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div className=\"form-input\">\n        <label htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Dê a avaliação do filme\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={ this.handleSubmit }\n          className=\"submit-btn\"\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    bookmarked: PropTypes.bool,\n    genre: PropTypes.string,\n    id: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.number,\n    ]).isRequired,\n    imagePath: PropTypes.string,\n    rating: PropTypes.number,\n    storyline: PropTypes.string,\n    subtitle: PropTypes.string,\n    title: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n};\n\nMovieForm.defaultProps = {\n  movie: {\n    bookmarked: false,\n    genre: '',\n    imagePath: '',\n    rating: 0,\n    storyline: '',\n    subtitle: '',\n    title: '',\n  },\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class MovieDetailsInfo extends React.Component {\n  render() {\n    const { movie, verifyImagePath } = this.props;\n    const { title, storyline, imagePath, genre, rating, subtitle } = movie;\n    const path = imagePath;\n\n    return (\n      <div className=\"detail-info-container\">\n        <h2>{ title }</h2>\n        <div className=\"detail-img\">\n          <img alt=\"Movie Cover\" src={ verifyImagePath(path) } />\n        </div>\n        <div className=\"detail-paragraph\">\n          <p>{ `Subtitle: ${subtitle}` }</p>\n          <p>{ `Storyline: ${storyline}` }</p>\n          <p>{ `Genre: ${genre}` }</p>\n          <p>{ `Rating: ${rating}` }</p>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetailsInfo.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    genre: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    subtitle: PropTypes.string.isRequired,\n  }).isRequired,\n  verifyImagePath: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport './MovieDetails.css';\n\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\nimport MovieDetailsInfo from './MovieDetailsInfo';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: {},\n      isLoaded: false,\n    };\n\n    this.fetchMovie = this.fetchMovie.bind(this);\n    this.verifyImagePath = this.verifyImagePath.bind(this);\n    this.deleteLink = this.deleteLink.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  async fetchMovie() {\n    const { match } = this.props;\n    const { id } = match.params;\n    const { getMovie } = movieAPI;\n    const movieRecieved = await getMovie(id);\n    this.setState({\n      movie: movieRecieved,\n      isLoaded: true,\n    });\n  }\n\n  verifyImagePath(path) {\n    if (path.includes('http')) {\n      return path;\n    }\n\n    return `../${path}`;\n  }\n\n  async deleteLink() {\n    const { match } = this.props;\n    const { id } = match.params;\n    const { deleteMovie } = movieAPI;\n    await deleteMovie(id);\n  }\n\n  render() {\n    const { movie, isLoaded } = this.state;\n    const { id } = movie;\n    if (!isLoaded) { return <Loading />; }\n    return (\n      <div data-testid=\"movie-details\" className=\"movie-detail-container\">\n        <MovieDetailsInfo movie={ movie } verifyImagePath={ this.verifyImagePath } />\n        <div className=\"detail-links-container\">\n          <Link to={ `/Movie_Card_Library_project/movies/${id}/edit` }>EDITAR</Link>\n          <Link to=\"/Movie_Card_Library_project/\">VOLTAR</Link>\n          <Link to=\"/Movie_Card_Library_project/\" onClick={ this.deleteLink }>DELETAR</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieDetails.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]),\n    }),\n  }).isRequired,\n};\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport './EditMovie.css';\n\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      movie: {\n        bookmarked: false,\n        genre: '',\n        imagePath: '',\n        rating: 0,\n        storyline: '',\n        subtitle: '',\n        title: '',\n        id: '',\n      },\n      shouldRedirect: false,\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async handleSubmit(newMovie) {\n    const { createMovie } = movieAPI;\n    await createMovie(newMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { movie, shouldRedirect } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/Movie_Card_Library_project/\" />;\n    }\n    return (\n      <div data-testid=\"new-movie\" className=\"movie-form-container\">\n        <MovieForm onSubmit={ this.handleSubmit } movie={ movie } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Redirect } from 'react-router-dom';\nimport './EditMovie.css';\n\nimport { MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\nimport Loading from '../components/Loading';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: [],\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.fetchMovie = this.fetchMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  async handleSubmit(updatedMovie) {\n    const { updateMovie } = movieAPI;\n    await updateMovie(updatedMovie);\n    this.setState({\n      shouldRedirect: true,\n    });\n  }\n\n  async fetchMovie() {\n    const { match } = this.props;\n    const { id } = match.params;\n    const { getMovie } = movieAPI;\n    const movieRecieved = await getMovie(id);\n    this.setState({\n      movie: movieRecieved,\n      status: '',\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/Movie_Card_Library_project/\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <div data-testid=\"edit-movie\" className=\"movie-form-container\">\n        <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\n\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.number,\n      ]).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport './App.css';\n\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nconst newMoviePath = '/Movie_Card_Library_project/movies/new';\nconst movieDetailsPath = '/Movie_Card_Library_project/movies/:id';\nconst editMoviePath = '/Movie_Card_Library_project/movies/:id/edit';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app-header\">\n        <h1 className=\"header-title\">Movie Card Library CRUD Project</h1>\n      </div>\n      <Switch>\n        <Route exact path=\"/Movie_Card_Library_project/\" component={ MovieList } />\n        <Route exact path={ newMoviePath } component={ NewMovie } />\n        <Route exact path={ movieDetailsPath } component={ MovieDetails } />\n        <Route exact path={ editMoviePath } component={ EditMovie } />\n        <Route path=\"\" exact component={ NotFound } />\n      </Switch>\n      <div className=\"new-movie\">\n        <Link to=\"/Movie_Card_Library_project/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}